{"id":"../node_modules/near-api-js/src/utils/enums.ts","dependencies":[{"name":"C:\\users\\htafo\\dev\\near\\staking-tools\\node_modules\\near-api-js\\tsconfig.json","includedInParent":true,"mtime":1602709694358},{"name":"C:\\users\\htafo\\dev\\near\\staking-tools\\package.json","includedInParent":true,"mtime":1602792924775},{"name":"C:\\users\\htafo\\dev\\near\\staking-tools\\node_modules\\near-api-js\\package.json","includedInParent":true,"mtime":1602709694358}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Assignable = exports.Enum = void 0;\r\nclass Enum {\r\n    constructor(properties) {\r\n        if (Object.keys(properties).length !== 1) {\r\n            throw new Error('Enum can only take single value');\r\n        }\r\n        Object.keys(properties).map((key) => {\r\n            this[key] = properties[key];\r\n            this.enum = key;\r\n        });\r\n    }\r\n}\r\nexports.Enum = Enum;\r\nclass Assignable {\r\n    constructor(properties) {\r\n        Object.keys(properties).map((key) => {\r\n            this[key] = properties[key];\r\n        });\r\n    }\r\n}\r\nexports.Assignable = Assignable;\r\n"},"sourceMaps":{"js":{"version":3,"file":"enums.js","sourceRoot":"","sources":["../node_modules/near-api-js/src/utils/enums.ts"],"names":[],"mappings":";;;AAAA,MAAsB,IAAI;IAGxB,YAAY,UAAe;QACvB,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACtC,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;SACtD;QACD,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAW,EAAE,EAAE;YACvC,IAAY,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAZD,oBAYC;AAED,MAAsB,UAAU;IAC5B,YAAY,UAAe;QACvB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAQ,EAAE,EAAE;YACpC,IAAY,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;CACJ;AAND,gCAMC","sourcesContent":["export abstract class Enum {\n  enum: string;\n\n  constructor(properties: any) {\n      if (Object.keys(properties).length !== 1) {\n          throw new Error('Enum can only take single value');\n      }\n      Object.keys(properties).map((key: string) => {\n          (this as any)[key] = properties[key];\n          this.enum = key;\n      });\n  }\n}\n\nexport abstract class Assignable {\n    constructor(properties: any) {\n        Object.keys(properties).map((key: any) => {\n            (this as any)[key] = properties[key];\n        });\n    }\n}\n"]}},"error":null,"hash":"2dba822056b5975b4a5f30c8df86e968","cacheData":{"env":{}}}